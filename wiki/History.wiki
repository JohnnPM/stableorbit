#summary One-sentence summary of this page.
#labels Featured,Phase-Design,Phase-Implementation

= Introduction =
Stableorbit started out as two programs, a Genetic Algorithm and a 3D solar system visualizer (named 'GA' and 'planetarium' respectively). 
= Details =
 0.2 History

Stableorbit started out as two programs, a Genetic Algorithm and a 3D solar system visualizer (named 'GA' and 'planetarium' respectively). The Genetic Algorithm uses stochastic methods to find long lasting (stable) solar system configurations. Through repeated mutations and simulations GA pushes a population of solar systems, each containing one or more stars and multiple planets towards long-term stability. The planetary systems can then be displayed in 3D using our planetarium tool.

GA and planetarium were excellent candidates for creating a distributed GA that doubled as a screen saver. By offloading the CPU-intensive fitness evaluation to the client (running planetarium as the screen saver) we were able to vastly increase the number of systems generated simultaniously simply by connecting more clients.   

Although operational, further modifications were needed before we started to generate systems with both good stability ratings as well as elliptical orbits. More of this is described later.
0.3 Physics & AI Concepts

"Stableorbit utilizes an O(N^2) Leapfrog Euler Algorithm for numerical integration.  Using the leapfrog method we may make our time step larger while conserving the total energy of the system.  The derivation of the leapfrog method is as follows:

- Ryan Haynes (co-developer)


A solar system's stability (or fitness) is determined inside 'orbitSystem.py' using the Virial Theorom. The Virial Theorom provides us with a numerical representation of the ratio between potential and kinetic energy. A value between 0.3 and 1 indicates a potentially stable system. Because eliptical orbits cause planets to speed up and slow down (yielding different Virial ratios) the VT scores must be averaged over time.


The GA initially focused on trying to create multi-planet and multi-star systems. We had a difficult time creating anything that resembled an orbit. Even after evaluating systems over  extremely large time period searching for VT averages of about 0.5 we couldn't find any orbits. Later on I determined the root of the problem.  Because  our systems were being generated with multiple stars and about fifteen planets, the masses of the additional stars was throwing off the viral therom and making the masses of the planets insignificant in comparison.  This left us with stable binary systems of two stars orbiting eachother and numerous planets flying out into space.  Restricting the starting conditions to one star and one planet enabled orbits to be found using a simple random search without the need for a Genetic Algorithm. 


More info on the Virial Therom can be found here:

     http://en.wikipedia.org/wiki/Virial_theorem 